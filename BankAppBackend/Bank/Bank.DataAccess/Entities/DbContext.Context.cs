//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Bank.DataAccess.Entities
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class sdirecttestdbEntities : DbContext
    {
        public sdirecttestdbEntities()
            : base("name=sdirecttestdbEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Account> Accounts { get; set; }
        public virtual DbSet<Address> Addresses { get; set; }
        public virtual DbSet<CartItem> CartItems { get; set; }
        public virtual DbSet<Category> Categories { get; set; }
        public virtual DbSet<MasterUser> MasterUsers { get; set; }
        public virtual DbSet<Order> Orders { get; set; }
        public virtual DbSet<OrdersMaster> OrdersMasters { get; set; }
        public virtual DbSet<Product> Products { get; set; }
        public virtual DbSet<ProductImage> ProductImages { get; set; }
        public virtual DbSet<Role> Roles { get; set; }
        public virtual DbSet<Seller> Sellers { get; set; }
        public virtual DbSet<SubCategory> SubCategories { get; set; }
        public virtual DbSet<TempCartItem> TempCartItems { get; set; }
        public virtual DbSet<Transaction> Transactions { get; set; }
        public virtual DbSet<UserRole> UserRoles { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<MoneyAccount> MoneyAccounts { get; set; }
    
        public virtual int usp_AddMoney(Nullable<long> accountId, Nullable<long> addBalance)
        {
            var accountIdParameter = accountId.HasValue ?
                new ObjectParameter("AccountId", accountId) :
                new ObjectParameter("AccountId", typeof(long));
    
            var addBalanceParameter = addBalance.HasValue ?
                new ObjectParameter("AddBalance", addBalance) :
                new ObjectParameter("AddBalance", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_AddMoney", accountIdParameter, addBalanceParameter);
        }
    
        public virtual ObjectResult<usp_OffsetList_Result> usp_OffsetList(Nullable<int> offset, Nullable<int> limit, string order, string sort, Nullable<long> accountId)
        {
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("Offset", offset) :
                new ObjectParameter("Offset", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("limit", limit) :
                new ObjectParameter("limit", typeof(int));
    
            var orderParameter = order != null ?
                new ObjectParameter("order", order) :
                new ObjectParameter("order", typeof(string));
    
            var sortParameter = sort != null ?
                new ObjectParameter("sort", sort) :
                new ObjectParameter("sort", typeof(string));
    
            var accountIdParameter = accountId.HasValue ?
                new ObjectParameter("AccountId", accountId) :
                new ObjectParameter("AccountId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_OffsetList_Result>("usp_OffsetList", offsetParameter, limitParameter, orderParameter, sortParameter, accountIdParameter);
        }
    
        public virtual int usp_PayCheckout(string accountNo, Nullable<long> amount, Nullable<long> orderId)
        {
            var accountNoParameter = accountNo != null ?
                new ObjectParameter("AccountNo", accountNo) :
                new ObjectParameter("AccountNo", typeof(string));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(long));
    
            var orderIdParameter = orderId.HasValue ?
                new ObjectParameter("OrderId", orderId) :
                new ObjectParameter("OrderId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_PayCheckout", accountNoParameter, amountParameter, orderIdParameter);
        }
    
        public virtual int usp_RefundMoney(Nullable<int> orderMasterId, Nullable<double> amount)
        {
            var orderMasterIdParameter = orderMasterId.HasValue ?
                new ObjectParameter("OrderMasterId", orderMasterId) :
                new ObjectParameter("OrderMasterId", typeof(int));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_RefundMoney", orderMasterIdParameter, amountParameter);
        }
    
        public virtual int usp_SendMoney(string accountNo, Nullable<long> addBalance, Nullable<long> accountId)
        {
            var accountNoParameter = accountNo != null ?
                new ObjectParameter("AccountNo", accountNo) :
                new ObjectParameter("AccountNo", typeof(string));
    
            var addBalanceParameter = addBalance.HasValue ?
                new ObjectParameter("AddBalance", addBalance) :
                new ObjectParameter("AddBalance", typeof(long));
    
            var accountIdParameter = accountId.HasValue ?
                new ObjectParameter("AccountId", accountId) :
                new ObjectParameter("AccountId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_SendMoney", accountNoParameter, addBalanceParameter, accountIdParameter);
        }
    
        public virtual int usp_WithdrawMoney(string accountNo, Nullable<long> addBalance)
        {
            var accountNoParameter = accountNo != null ?
                new ObjectParameter("AccountNo", accountNo) :
                new ObjectParameter("AccountNo", typeof(string));
    
            var addBalanceParameter = addBalance.HasValue ?
                new ObjectParameter("AddBalance", addBalance) :
                new ObjectParameter("AddBalance", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_WithdrawMoney", accountNoParameter, addBalanceParameter);
        }
    }
}
